// Generated by CoffeeScript 1.6.3
(function() {
  var express, format, rack, rackAuth, racksjs, util, webserver,
    _this = this,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require('express');

  webserver = express();

  util = require('util');

  format = util.format;

  racksjs = require('./racks.js');

  rack = false;

  webserver.engine('html', require('ejs').renderFile);

  webserver.use(express.bodyParser());

  webserver.use("/views", express["static"](__dirname + '/views'));

  rackAuth = function(cb) {
    var _this = this;
    if (rack) {
      return cb();
    } else {
      return new racksjs({
        username: process.argv[2],
        apiKey: process.argv[3],
        verbosity: 5,
        cache: true
      }, function(newRack) {
        if (rack.error) {
          console.log(rack.error);
          return res.send(rack.error);
        }
        rack = newRack;
        return cb();
      });
    }
  };

  webserver.get('/', function(req, res) {
    return res.render('index.html', function(err, html) {
      if (err) {
        console.log(err);
        return res.send(err);
      } else {
        console.log('index rendered');
        return res.send(html);
      }
    });
  });

  webserver.post('/getAccount', function(req, res) {
    return rackAuth(function() {
      var counter, feature, featureName, featureObject, filteredResourceFeatures, modelFeatures, product, productName, products, resource, resourceFeatures, resourceName, response, _ref, _ref1, _ref2;
      console.log('rackspace auth successful');
      response = {};
      counter = 0;
      products = {};
      _ref = rack.products;
      for (productName in _ref) {
        product = _ref[productName];
        products[productName] = {
          productFeatures: [],
          resources: {},
          meta: {
            target: rack[productName].meta.target(),
            endpoints: rack[productName].meta.endpoints
          }
        };
        _ref1 = rack.products[productName];
        for (resourceName in _ref1) {
          resource = _ref1[resourceName];
          counter++;
          if (typeof resource === 'function') {
            products[productName].productFeatures.push(resourceName);
          } else {
            if (rack[productName][resourceName].model == null) {
              modelFeatures = [];
            } else {
              modelFeatures = Object.keys(rack[productName][resourceName].model({}));
            }
            resourceFeatures = {};
            filteredResourceFeatures = ['assume', 'meta', 'model'];
            _ref2 = rack[productName][resourceName];
            for (featureName in _ref2) {
              feature = _ref2[featureName];
              if (__indexOf.call(filteredResourceFeatures, featureName) >= 0) {

              } else {
                featureObject = {};
                featureObject = {
                  show: 0,
                  details: feature,
                  request: {}
                };
                resourceFeatures[featureName] = featureObject;
              }
            }
            products[productName].resources[resourceName] = {
              modelFeatures: modelFeatures,
              resourceFeatures: resourceFeatures,
              models: [],
              meta: rack[productName][resourceName].meta
            };
          }
        }
      }
      return res.send(products);
    });
  });

  webserver.post('/:productName/:resourceName/:feature', function(req, res) {
    if (rack) {
      if (typeof rack[req.params.productName][req.params.resourceName][req.params.feature] === 'function') {
        return rack[req.params.productName][req.params.resourceName][req.params.feature](function(reply) {
          return res.send(reply);
        });
      } else {
        console.log('REQUESTED FEATURE WAS NOT A FUNCTION:', req.params);
        return res.send([]);
      }
    } else {
      console.log('please auth');
      return res.send([]);
    }
  });

  webserver.listen(3000);

  console.log('Listening on port 3000');

}).call(this);
